{"version":3,"sources":["assets/hangmans_knot.svg","assets/faces/neutralface.svg","assets/faces/sadface.svg","assets/faces/screamingface.svg","assets/faces/tearface.svg","assets/faces/prededface.svg","assets/faces/dedface.svg","components/intro/Intro.js","components/mainscreen/Mainscreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Intro","props","className","src","knot","alt","onClick","startGame","Mainscreen","useState","inputLetter","setInputLetter","arrayOfCorrectGuesses","setArrayOfCorrectGuesses","arrayOfWrongGuesses","setArrayOfWrongtGuesses","letterGuessed","setLetterGuessed","enterLetter","setEnterLetter","noSpecialChars","setNoSpecialChars","noNumbers","setNoNumbers","neutralFace","setNeutralFace","sadFace","setSadFace","screamingFace","setScreamingFace","tearFace","setTearFace","preDedFace","setPreDedFace","dedFace","setDedFace","renderBody","setRenderBody","renderLeftArm","setRenderLeftArm","renderRightArm","setRenderRightArm","renderLeftLeg","setRenderLeftLeg","renderRightLeg","setRenderRightLeg","gameWon","setGameWon","gameLost","setGameLost","arrWord","word","split","winCheckUniqueLetters","filter","letter","i","arr","indexOf","sort","join","winCheckCorrectGuesses","useEffect","length","autoFocus","neutralFaceImg","sadFaceImg","tearFaceImg","screamingFaceImg","preDedFaceImg","dedFaceImg","map","key","includes","disabled","size","maxLength","placeholder","value","onChange","event","target","type","e","preventDefault","guess","toUpperCase","correctGuess","correctGuessesList","match","isNaN","wrongGuessesList","restartGame","App","setWord","gameStarted","setGameStarted","startGameHandler","a","fetch","response","json","data","fetchedWord","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b639907a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hangmans_knot.2e848aff.svg\";","module.exports = __webpack_public_path__ + \"static/media/neutralface.e90b4c45.svg\";","module.exports = __webpack_public_path__ + \"static/media/sadface.75ce344b.svg\";","module.exports = __webpack_public_path__ + \"static/media/screamingface.57eb1cd1.svg\";","module.exports = __webpack_public_path__ + \"static/media/tearface.ca499cc3.svg\";","module.exports = __webpack_public_path__ + \"static/media/prededface.5564f630.svg\";","module.exports = __webpack_public_path__ + \"static/media/dedface.0fce98ba.svg\";","import React from 'react'\r\nimport './Intro.css'\r\nimport knot from '../../assets/hangmans_knot.svg'\r\n\r\nexport const Intro = (props) => {\r\n  return (\r\n    <div className={'container d-flex flex-column align-items-center'}>\r\n      <h3 className={'h3 mt-5 text-center'}>\r\n        SmilingHangman\r\n        <br />\r\n        one man industries\r\n      </h3>\r\n      <h5 className={'h5 mb-5'}>proudly present</h5>\r\n      <img src={knot} alt='' className={'h4 mb-5'} />\r\n      <h2 className={'h2'}>HANGMAN</h2>\r\n      <p className={'p'}>A word guessing game</p>\r\n      <button onClick={props.startGame} className={'btn btn-dark'}>\r\n        START GAME\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Intro\r\n","import React, { useState, useEffect } from 'react'\r\nimport './Mainscreen.css'\r\n\r\nimport neutralFaceImg from '../../assets/faces/neutralface.svg'\r\nimport sadFaceImg from '../../assets/faces/sadface.svg'\r\nimport screamingFaceImg from '../../assets/faces/screamingface.svg'\r\nimport tearFaceImg from '../../assets/faces/tearface.svg'\r\nimport preDedFaceImg from '../../assets/faces/prededface.svg'\r\nimport dedFaceImg from '../../assets/faces/dedface.svg'\r\n\r\nexport const Mainscreen = (props) => {\r\n  const [inputLetter, setInputLetter] = useState('')\r\n  const [arrayOfCorrectGuesses, setArrayOfCorrectGuesses] = useState([])\r\n  const [arrayOfWrongGuesses, setArrayOfWrongtGuesses] = useState([])\r\n\r\n  const [letterGuessed, setLetterGuessed] = useState(false)\r\n  const [enterLetter, setEnterLetter] = useState(false)\r\n  const [noSpecialChars, setNoSpecialChars] = useState(false)\r\n  const [noNumbers, setNoNumbers] = useState(false)\r\n\r\n  const [neutralFace, setNeutralFace] = useState(false)\r\n  const [sadFace, setSadFace] = useState(false)\r\n  const [screamingFace, setScreamingFace] = useState(false)\r\n  const [tearFace, setTearFace] = useState(false)\r\n  const [preDedFace, setPreDedFace] = useState(false)\r\n  const [dedFace, setDedFace] = useState(false)\r\n  const [renderBody, setRenderBody] = useState(false)\r\n  const [renderLeftArm, setRenderLeftArm] = useState(false)\r\n  const [renderRightArm, setRenderRightArm] = useState(false)\r\n  const [renderLeftLeg, setRenderLeftLeg] = useState(false)\r\n  const [renderRightLeg, setRenderRightLeg] = useState(false)\r\n\r\n  const [gameWon, setGameWon] = useState(false)\r\n  const [gameLost, setGameLost] = useState(false)\r\n\r\n  const arrWord = props.word.split('')\r\n\r\n  const guessHandler = (e) => {\r\n    e.preventDefault()\r\n    setInputLetter('')\r\n    const guess = inputLetter.toUpperCase()\r\n    const correctGuess = arrWord.includes(guess)\r\n\r\n    if (arrayOfCorrectGuesses.includes(guess)) {\r\n      setLetterGuessed(true)\r\n    } else if (correctGuess) {\r\n      setArrayOfCorrectGuesses((correctGuessesList) => [\r\n        ...correctGuessesList,\r\n        guess,\r\n      ])\r\n    } else if (guess === '') {\r\n      setEnterLetter(true)\r\n    } else if (guess.match(/[^\\w\\s]/gi)) {\r\n      setNoSpecialChars(true)\r\n    } else if (!isNaN(guess)) {\r\n      setNoNumbers(true)\r\n    } else if (arrayOfWrongGuesses.includes(guess)) {\r\n      setLetterGuessed(true)\r\n    } else {\r\n      setArrayOfWrongtGuesses((wrongGuessesList) => [\r\n        ...wrongGuessesList,\r\n        guess,\r\n      ])\r\n    }\r\n  }\r\n\r\n  const modalHandler = () => {\r\n    setLetterGuessed(false)\r\n    setEnterLetter(false)\r\n    setNoSpecialChars(false)\r\n    setNoNumbers(false)\r\n  }\r\n\r\n  let winCheckUniqueLetters = arrWord\r\n    .filter((letter, i, arr) => arr.indexOf(letter) === i)\r\n    .sort()\r\n    .join('')\r\n\r\n  let winCheckCorrectGuesses = arrayOfCorrectGuesses\r\n    .filter((letter, i, arr) => arr.indexOf(letter) === i)\r\n    .sort()\r\n    .join('')\r\n\r\n  useEffect(() => {\r\n    arrayOfWrongGuesses.length === 1 && setNeutralFace(true)\r\n    arrayOfWrongGuesses.length === 2 && setRenderBody(true)\r\n    arrayOfWrongGuesses.length === 2 && setSadFace(true)\r\n    arrayOfWrongGuesses.length === 2 && setNeutralFace(false)\r\n    arrayOfWrongGuesses.length === 3 && setRenderLeftArm(true)\r\n    arrayOfWrongGuesses.length === 3 && setScreamingFace(true)\r\n    arrayOfWrongGuesses.length === 3 && setSadFace(false)\r\n    arrayOfWrongGuesses.length === 4 && setRenderRightArm(true)\r\n    arrayOfWrongGuesses.length === 4 && setTearFace(true)\r\n    arrayOfWrongGuesses.length === 4 && setScreamingFace(false)\r\n    arrayOfWrongGuesses.length === 5 && setRenderLeftLeg(true)\r\n    arrayOfWrongGuesses.length === 5 && setPreDedFace(true)\r\n    arrayOfWrongGuesses.length === 5 && setTearFace(false)\r\n    arrayOfWrongGuesses.length === 6 && setRenderRightLeg(true)\r\n    arrayOfWrongGuesses.length === 6 && setDedFace(true)\r\n    arrayOfWrongGuesses.length === 6 && setPreDedFace(false)\r\n    winCheckUniqueLetters === winCheckCorrectGuesses && setGameWon(true)\r\n    arrayOfWrongGuesses.length === 6 && setGameLost(true)\r\n  }, [\r\n    arrayOfWrongGuesses.length,\r\n    winCheckUniqueLetters,\r\n    winCheckCorrectGuesses,\r\n    props.word,\r\n  ])\r\n\r\n  // winCheckUniqueLetters === winCheckCorrectGuesses && setGameWon(true)\r\n  // alert('game won')\r\n  // arrayOfWrongGuesses.length === 6 &&\r\n  //   alert(`game over. Word was \"${props.word}\"`)\r\n\r\n  return (\r\n    <div className={'container d-flex flex-column align-items-center'}>\r\n      {(letterGuessed || enterLetter || noSpecialChars || noNumbers) && (\r\n        <div className={'info-modal'}>\r\n          <div className={'info-box'}>\r\n            <div className={'information'}>\r\n              {letterGuessed && 'Letter already guessed'}\r\n              {enterLetter && 'Please enter a letter'}\r\n              {noSpecialChars &&\r\n                'No special characters and letters only from latin alphabet please'}\r\n              {noNumbers && 'No numbers here'}\r\n            </div>\r\n            <button\r\n              className={'btn btn-dark'}\r\n              onClick={modalHandler}\r\n              autoFocus={true}\r\n            >\r\n              OK\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className={'gallows'}>\r\n        {neutralFace && (\r\n          <img src={neutralFaceImg} alt='' className={'faces-of-doom'} />\r\n        )}\r\n        {sadFace && <img src={sadFaceImg} alt='' className={'faces-of-doom'} />}\r\n        {tearFace && (\r\n          <img src={tearFaceImg} alt='' className={'faces-of-doom'} />\r\n        )}\r\n        {screamingFace && (\r\n          <img src={screamingFaceImg} alt='' className={'faces-of-doom'} />\r\n        )}\r\n        {preDedFace && (\r\n          <img src={preDedFaceImg} alt='' className={'faces-of-doom'} />\r\n        )}\r\n        {dedFace && <img src={dedFaceImg} alt='' className={'faces-of-doom'} />}\r\n        {renderBody && <span className={'body-of-doom'}></span>}\r\n        {renderLeftArm && <span className={'left-arm-of-doom'}></span>}\r\n        {renderRightArm && <span className={'right-arm-of-doom'}></span>}\r\n        {renderLeftLeg && <span className={'left-leg-of-doom'}></span>}\r\n        {renderRightLeg && <span className={'right-leg-of-doom'}></span>}\r\n      </div>\r\n      {/* {word.toUpperCase()} */}\r\n      <div className={'win-lose-message'}>\r\n        {gameWon && 'YOU WON!'}{' '}\r\n        {gameLost && `YOU DIED. The word was ${props.word}`}\r\n      </div>\r\n      <div className='d-flex mb-4'>\r\n        {arrWord.map((letter, i) => (\r\n          <div\r\n            className='p-3 mx-1 border rounded-sm d-flex align-items-center justify-content-center letterbox'\r\n            key={i}\r\n          >\r\n            {arrayOfCorrectGuesses.includes(letter) ? (\r\n              <div className='h2 mb-0 d-inline-block'>{letter}</div>\r\n            ) : (\r\n              <div className='h2 mb-0 d-inline-block'>_</div>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className={'d-flex flex-column align-items-center'}>\r\n        <div>\r\n          <u>incorrect letters:</u>\r\n        </div>\r\n        <div className='d-flex wrong-guesses-list'>\r\n          {arrayOfWrongGuesses.map((letter, i) => (\r\n            <div\r\n              className='p-2 d-flex align-items-center justify-content-center'\r\n              key={i}\r\n            >\r\n              <div className='h2 d-inline-block'>{letter}</div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <form className={'d-flex align-items-center justify-content-center'}>\r\n        <input\r\n          autoFocus={true}\r\n          disabled={\r\n            letterGuessed ||\r\n            enterLetter ||\r\n            noSpecialChars ||\r\n            noNumbers ||\r\n            gameWon ||\r\n            gameLost\r\n          }\r\n          size='1'\r\n          maxLength='1'\r\n          placeholder=''\r\n          value={inputLetter}\r\n          onChange={(event) => setInputLetter(event.target.value)}\r\n          className={'mr-2 p-1 text-center'}\r\n        />\r\n        {!(gameWon || gameLost) && (\r\n          <button\r\n            type='submit'\r\n            disabled={\r\n              letterGuessed || enterLetter || noSpecialChars || noNumbers\r\n            }\r\n            onClick={guessHandler}\r\n            className={'btn btn-dark py-1 px-2'}\r\n          >\r\n            GUESS\r\n          </button>\r\n        )}\r\n        {(gameWon || gameLost) && (\r\n          <button\r\n            onClick={props.restartGame}\r\n            className={'btn btn-dark py-1 px-2'}\r\n          >\r\n            PLAY AGAIN?\r\n          </button>\r\n        )}\r\n      </form>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Mainscreen\r\n","import React, { useState } from 'react'\nimport './App.css'\nimport Intro from './components/intro/Intro'\nimport Mainscreen from './components/mainscreen/Mainscreen'\n\nfunction App() {\n  const [word, setWord] = useState('hangman'.toUpperCase())\n  // change useState to empty string when done with testing\n  const [gameStarted, setGameStarted] = useState(false)\n\n  const startGameHandler = async () => {\n    const response = await fetch(\n      'https://random-word-api.herokuapp.com/word?number=1'\n    )\n    const data = await response.json()\n    const fetchedWord = data[0].toUpperCase()\n    setWord(fetchedWord)\n    setGameStarted(true)\n  }\n\n  // const restartGameHandler = async () => {\n  //   const response = await fetch(\n  //     'https://random-word-api.herokuapp.com/word?number=1'\n  //   )\n  //   const data = await response.json()\n  //   const fetchedWord = data[0].toUpperCase()\n  //   setWord(fetchedWord)\n  // }\n\n  const restartGameHandler = () => {\n    setGameStarted(false)\n    startGameHandler()\n  }\n\n  return (\n    <div className='App container d-flex flex-column align-items-center'>\n      {!gameStarted && <Intro startGame={startGameHandler} />}\n      {gameStarted && (\n        <Mainscreen word={word} restartGame={restartGameHandler} />\n      )}\n      {/* remember to change gameStarted ! */}\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}